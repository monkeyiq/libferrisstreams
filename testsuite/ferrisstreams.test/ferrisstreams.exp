#   Copyright (C) 2003 Ben Martin
# Based on calc.exp which is GPL and Copyright (C) 1997 - 2001 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

set timeout 30
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}

proc rt_expected { testname expected cmd } {
    global SDATA
    global verbose

    set failed_with_timeout 0
    set failed_with_eof 0
    send_user "rt_expected cmd:$cmd\n";
    eval spawn $cmd
    expect {
        $expected { pass "XXX $cmd ex:$expected buf:$expect_out(buffer)"; return; }
	timeout { set failed_with_timeout 1; set bufcache "$expect_out(buffer)"; }
	eof { set failed_with_eof 1; set bufcache "$expect_out(buffer)"; }
	-re "cought e" { set bufcache "$expect_out(buffer)"; }
	-re "error:" { set bufcache "$expect_out(buffer)"; }
	-re "Error:" { set bufcache "$expect_out(buffer)"; }
	-re "ERROR" { set bufcache "$expect_out(buffer)"; }
	"Unhandled Java exception" { set bufcache "$expect_out(buffer)"; }
    }

    set getrest 0;
    if { $failed_with_timeout != 1 } {
	if { $failed_with_eof != 1 } {
	    set getrest 1;
	}
    }

    rt_capture_out $testname $expected $cmd $bufcache $getrest;

#     set actual $expect_out(buffer);
#     send_user "FAILING... $testname  actual:$actual\n";
#     if { $failed_with_timeout != 1 } {
# 	if { $failed_with_eof != 1 } {
# 	    expect {
# 		eof { append actual $expect_out(buffer); }
# 	    }
# 	}
#     }
#     set OUTFILEBASE "/tmp/ferris-test-output/";
#     system mkdir -p $OUTFILEBASE;
#     set outfilename "$OUTFILEBASE/$testname";
#     fail "failed_with_timeout:$failed_with_timeout cmd: $cmd SEE: $outfilename ";

#     set dumpfile [ open "$outfilename" w ];
#     puts $dumpfile " failed_with_timeout:$failed_with_timeout\n";
#     puts $dumpfile " cmd: $cmd\n";
#     puts $dumpfile " expected: $expected\n";
#     puts $dumpfile " actual: $actual\n";
}

proc rt_expected_re { testname expected cmd } {
    global SDATA
    global verbose

    set failed_with_timeout 0
    set failed_with_eof 0
    send_user "rt_expected cmd:$cmd\n";
    eval spawn $cmd
    expect {
        -re $expected { pass "XXX $cmd ex:$expected buf:$expect_out(buffer)"; return; }
	timeout { set failed_with_timeout 1; set bufcache "$expect_out(buffer)"; }
	eof { set failed_with_eof 1; set bufcache "$expect_out(buffer)"; }
	-re "cought e" { set bufcache "$expect_out(buffer)"; }
	-re "error:" { set bufcache "$expect_out(buffer)"; }
	-re "Error:" { set bufcache "$expect_out(buffer)"; }
	-re "ERROR" { set bufcache "$expect_out(buffer)"; }
	"Unhandled Java exception" { set bufcache "$expect_out(buffer)"; }
    }

    set getrest 0;
    if { $failed_with_timeout != 1 } {
	if { $failed_with_eof != 1 } {
	    set getrest 1;
	}
    }

    rt_capture_out $testname $expected $cmd $bufcache $getrest;
}

proc mydiff { testname diffflags fileA fileB } {

    set cmd "diff -Nsuar $diffflags $fileA $fileB"
    rt_expected "$testname" "Files $fileA and $fileB are identical" "$cmd";
}

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################


proc ut_app { EXE } {
    global EXBASE
    global SDATA
    global verbose

    if { $verbose > 1 } {
	send_user  "Testing app $EXE...\n"
    }
    send_user "running app at $EXBASE/testsuite/$EXE\n"
    spawn nice "$EXBASE/testsuite/$EXE"
    expect {
	-re "Success" { pass "for exe $EXE"; return } 
	-re "ERROR" { fail "Exception occured during test for $EXE"; }
	timeout { fail "Failed during test for $EXE (timeout)"; }
    }
    fail "problem with test for $EXE"

}


################################################################################
################################################################################
################################################################################
#
# Here we go
#
################################################################################
################################################################################
################################################################################

proc run_all {} {
    ut_app "ut_close_signal"
    ut_app "ut_fd_streams"
    ut_app "ut_limiting_istream"
    ut_app "ut_nullstream"
    ut_app "ut_proxy_streams"
    ut_app "ut_radix_dump"
    ut_app "ut_stringstream"
    ut_app "ut_tee_stream"
    mydiff "compare tee output of alice13a.txt" "" "/tmp/alice13a.txt" "/tmp/alice13a.txt.out"

}

run_all



